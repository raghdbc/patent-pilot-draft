
import { ApplicantData } from '@/utils/applicantSchema';

// This service would interact with the backend in a production environment
// For now, we're simulating the template processing on the client side

/**
 * In a real application, this function would make an API call to a server
 * that uses python-docxtpl to process the templates with the provided data
 */
export async function processTemplate(
  templateName: string, 
  data: ApplicantData
): Promise<Blob> {
  console.log(`Processing template ${templateName} with data:`, data);
  
  // In production, this would be an API call like:
  // const response = await fetch('/api/generate-document', {
  //   method: 'POST',
  //   headers: { 'Content-Type': 'application/json' },
  //   body: JSON.stringify({ templateName, data })
  // });
  // return await response.blob();
  
  // For demonstration purposes, we're returning a simple Word document
  // In a real implementation, this would be generated by the server
  // using python-docxtpl to fill in the template variables
  
  // Template variable examples (what would be used on the server):
  // {{ applicant_name }}
  // {{ applicant_address }}
  // {{ title_of_invention }}
  // etc.
  
  // Placeholder implementation with a minimal Word document
  const base64Content = getDocumentTemplate(templateName);
  
  // Convert base64 to Blob
  const binaryString = window.atob(base64Content);
  const bytes = new Uint8Array(binaryString.length);
  for (let i = 0; i < binaryString.length; i++) {
    bytes[i] = binaryString.charCodeAt(i);
  }
  
  return new Blob([bytes], { 
    type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' 
  });
}

/**
 * Get document template base64 string
 * In a real application, these would be actual templates stored on the server
 * with placeholders like {{ applicant_name }} to be filled by python-docxtpl
 */
function getDocumentTemplate(templateName: string): string {
  // These are minimal valid .docx files for demonstration purposes
  // In a real application, you would use proper templates
  if (templateName === 'form1') {
    // Replace this with a valid base64 representation of your Form 1 template
    return "UEsDBBQABgAIAAAAIQDfpNJsWgEAACAFAAATAAgCW0NvbnRlbnRfVHlwZXNdLnhtbCCiBAIoolMtuwjAQRfeV+g+Rt1Vi6KKqKgKLPpYtUukHGHsCVv2Sx7z+vhMCUVUBkQpsIiUz994zVsaD0dqabAkRtXcl6xc9loGTXmk3K9nX5C1/ZBkm4ZQw3kHJNoBsNLy9GUw2ATAjtcOSzVMKT5yjnIMVWPgALj1NfLQi5THOeBDiXSzBj3r9By6dS8J0kHIb8nEN95r5v9pIFt28FBKWIC0OSO9AcYfusggWxB5qs/KX8lJ/7SXbLRnQ9xa88H7JOOnn/bx5BnoQExQlTpCRF+UzKEK7beNAj5FSQcC7jVlh3go6jXE91OTiJoK/Xl4lWvvA590DRx8WWFD6iYvbDGDERfALLterzfU2CuNQ8A9YLJ2Z5a6nX0CuFmYzPXvRvQ2EBwnR+c354NzrLYHxX0IkPiXezh6STPEiISssXhCzYhMRJn9plFoB/D31d6AaPWDkRoM9sM4OOG46/8Pw==";
  } else {
    // Patent draft template
    return "UEsDBBQABgAIAAAAIQDfpNJsWgEAACAFAAATAAgCW0NvbnRlbnRfVHlwZXNdLnhtbCCiBAIooAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC0lMtuwjAQRfeV+g+Rt1Vi6KKqKgKLPpYtUukHGHsCVv2Sx7z+vhMCUVUBkQpsIiUz994zVsaD0dqabAkRtXcl6xc9loGTXmk3K9nX5C1/ZBkm4ZQw3kHJNoBsNLy9GUw2ATAjtcOSzVMKT5yjnIMVWPgALj1NfLQi5THOeBDiXSzBj3r9By6dS8J0kHIb8nEN95r5v9pIFt28FBKWIC0OSO9AcYfusggWxB5qs/KX8lJ/7SXbLRnQ9xa88H7JOOnn/bx5BnoQExQlTpCRF+UzKEK7beNAj5FSQcC7jVlh3go6jXE91OTiJoK/Xl4lWvvA590DRx8WWFD6iYvbDGDERfALLterzfU2CuNQ8A9YLJ2Z5a6nX0CuFmYzPXvRvQ2EBwnR+c354NzrLYHxX0IkPiXezh6STPEiISssXhCzYhMRJn9plFoB/D31d6AaPWDkRoM9sM4OOG46/8Pw==";
  }
}
