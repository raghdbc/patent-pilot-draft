
import { useState } from 'react';
import { ApplicantData } from '@/utils/applicantSchema';
import { toast } from '@/hooks/use-toast';

export function useGenerateDocument() {
  const [isGenerating, setIsGenerating] = useState(false);
  
  const generateDocument = async (
    templateName: string,
    data: ApplicantData
  ): Promise<void> => {
    setIsGenerating(true);
    
    try {
      // In a real application, this would make a request to a server endpoint
      // that would generate the document using python-docxtpl as shown in the example
      
      // For now, we'll simulate the API call with a delay
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      console.log(`Generating document from ${templateName} template with data:`, data);
      
      // Create file name based on template and applicant name
      const fileName = `${templateName}-${data.applicant_name.replace(/\s+/g, '-')}-${new Date().getTime()}.docx`;
      
      // Create a dummy Word document content (base64 encoded)
      // This is a minimal valid .docx file for demonstration purposes
      const base64Content = "";
      
      // Create a Blob from the base64 string
      const binaryString = window.atob(base64Content);
      const bytes = new Uint8Array(binaryString.length);
      for (let i = 0; i < binaryString.length; i++) {
        bytes[i] = binaryString.charCodeAt(i);
      }
      const blob = new Blob([bytes], { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' });
      
      // Create a download URL for the blob
      const url = URL.createObjectURL(blob);
      
      // Create and trigger download
      const element = document.createElement('a');
      element.setAttribute('href', url);
      element.setAttribute('download', fileName);
      element.style.display = 'none';
      document.body.appendChild(element);
      element.click();
      
      // Clean up
      setTimeout(() => {
        document.body.removeChild(element);
        URL.revokeObjectURL(url);
      }, 100);
      
      toast({
        title: "Document generated",
        description: `${fileName} has been downloaded.`,
      });
      
      console.log('Document generated successfully');
      
      return Promise.resolve();
    } catch (error) {
      console.error('Error generating document:', error);
      toast({
        variant: "destructive",
        title: "Generation failed",
        description: "Failed to generate document. Please try again.",
      });
      throw error;
    } finally {
      setIsGenerating(false);
    }
  };
  
  const generateAllDocuments = async (data: ApplicantData): Promise<void> => {
    try {
      setIsGenerating(true);
      
      // Generate Form 1 document
      await generateDocument('form1', data);
      
      // Generate Patent Draft document
      await generateDocument('patent-draft', data);
      
      toast({
        title: "All documents generated",
        description: "Form 1 and Patent Draft have been downloaded.",
      });
    } catch (error) {
      console.error('Error generating all documents:', error);
      toast({
        variant: "destructive",
        title: "Generation failed",
        description: "Failed to generate all documents. Please try again.",
      });
    } finally {
      setIsGenerating(false);
    }
  };

  return { generateDocument, generateAllDocuments, isGenerating };
}
